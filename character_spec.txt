# Statblock Spezifikation – Spielcharakter (SC) v0.3
=============================================

## Zweck
Einheitliche Regeln und eine feste Datenstruktur für die **Generierung** von Spielcharakteren (SCs). Dieses Dokument dient als maßgebliche Anleitung für einen Generator, um sicherzustellen, dass alle erstellten Charaktere konsistent, regelkonform und für digitale Tools lesbar sind.

## Grundprinzipien
1.  **Algorithmische Generierung:** Die Charaktererstellung ist ein strikter, algorithmischer Prozess. Die Schritte in Sektion 1 MÜSSEN exakt in der angegebenen Reihenfolge ausgeführt werden.
2.  **Datenintegrität:** Alle Werte im finalen JSON-Objekt MÜSSEN exakt nach den Formeln und Regeln dieses Dokuments berechnet werden. Es gibt keinen Raum für Interpretation.
3.  **Quellen der Macht:** Die Boni und Fähigkeiten eines Charakters stammen aus drei klar getrennten Quellen: **Volk**, **Beruf** und **Klasse**. Diese MÜSSEN in den dafür vorgesehenen Datenstrukturen erfasst werden.

---

### 1. Algorithmische Generierungshierarchie (Verbindlich)
Ein Generator MUSS die folgenden Schritte in exakter Reihenfolge ausführen, um einen Stufe-1-Charakter zu erstellen.

*   **Schritt 1: Initialisierung:** Erstelle ein leeres Charakter-Objekt. Setze alle sechs Kernattribute (`str`, `ges`, `kon`, `int`, `wis`, `cha`) auf `0`.
*   **Schritt 2: Volk wählen:** Wähle ein Volk. Addiere die Attributsmodifikatoren des Volks zu den Kernattributen. Trage die Volks-Fähigkeiten in das `faehigkeiten.volk` Array ein.
*   **Schritt 3: Beruf wählen:** Wähle einen Beruf aus der Referenztabelle (Sektion 8). Addiere die Attributsmodifikatoren des Berufs zu den Kernattributen. Trage die Berufs-Fähigkeiten in das `faehigkeiten.beruf` Array ein.
*   **Schritt 4: Klasse wählen:** Wähle eine Klasse aus der Referenztabelle (Sektion 9). Addiere die Attributsmodifikatoren der Klasse zu den Kernattributen. Trage die Stufe-1-Fähigkeit der Klasse in das `faehigkeiten.klasse` Array ein.
*   **Schritt 5: Attributs-Capping (Deckelung):** Überprüfe jedes der sechs Kernattribute.
    *   Wenn ein Attribut größer als `+3` ist, setze es auf `+3`.
    *   Wenn ein Attribut kleiner als `-1` ist, setze es auf `-1`.
    *   Dies sind die finalen Attribute des Charakters.
*   **Schritt 6: Abgeleitete Werte berechnen:** Berechne alle Werte in `abgeleitete_werte`, `abwehr` und `rettungswuerfe` unter Verwendung der finalen Attribute und der verbindlichen Formeln (Sektion 3, 4, 5).
*   **Schritt 7: Finale Ausgabe:** Fülle das gesamte JSON-Objekt mit den finalen, berechneten Werten.

---

### 2. Top-Level-Felder (Datenstruktur)
Das finale JSON-Objekt MUSS dieser Struktur folgen.

- `name`: String
- `spieler`: String
- `konzept`: String
- `stufe`: Integer
- `ep`: Integer
- `volk`: String
- `beruf`: String
- `klasse`: String
- `attribute`: Objekt (Siehe Sektion 3)
- `abgeleitete_werte`: Objekt (Siehe Sektion 4)
- `abwehr`: Objekt (Siehe Sektion 5)
- `rettungswuerfe`: Objekt (Siehe Sektion 6)
- `angriffe`: Array von Objekten (Siehe Sektion 7)
- `faehigkeiten`: Objekt (Siehe Sektion 8)
- `ausruestung`: Array von Objekten
- `inventar`: Array von Objekten
- `waehrung`: Objekt

---

### 3. Attribute (`attribute`)
Die finalen, gekappten Kernattribute des Charakters.

- **Struktur:**
  "attribute": { "str": "Integer", "ges": "Integer", "kon": "Integer", "int": "Integer", "wis": "Integer", "cha": "Integer" }

---

### 4. Abgeleitete Werte (`abgeleitete_werte`)
- **Struktur:**
  "abgeleitete_werte": { "lp_max": "Integer", "lp_aktuell": "Integer", "ini_bonus": "Integer", "bew": "Integer" }
- **Berechnungsformeln (verbindlich):**
  - `ini_bonus`: `round((attribute.ges + attribute.wis) / 2)`
  - `bew`: `4 + round(ini_bonus / 2)`
  - `lp_max`:
    - **Krieger:** `14 + 2 * (attribute.kon + stufe)`
    - **Waldläufer/Kleriker:** `12 + attribute.kon + 2 * stufe`
    - **Magier:** `10 + attribute.kon + stufe`

---

### 5. Abwehr (`abwehr`)
- **Struktur:**
  "abwehr": { "pa": "Integer", "asw": "Integer", "sr": { "total": "Integer", "quellen": [ { "quelle": "String", "wert": "Integer" } ] } }
- **Berechnungsformeln (verbindlich):**
  - `pa`: `9 + attribute.str + Boni`
  - `asw`: `9 + attribute.ges + round(attribute.wis / 2) + Boni`
  - `sr.total`: Summe aller `wert` aus `sr.quellen`.

---

### 6. Rettungswürfe (`rettungswuerfe`)
- **Struktur:**
  "rettungswuerfe": { "rz_bonus": "Integer", "rr_bonus": "Integer", "rw_bonus": "Integer" }
- **Berechnungsformeln (verbindlich):**
  - `rz_bonus`: `round((attribute.kon + attribute.str) / 2)`
  - `rr_bonus`: `round((attribute.ges + attribute.wis) / 2)`
  - `rw_bonus`: `round((attribute.wis + attribute.int) / 2)`

---

### 7. Angriffe (`angriffe`)
- **Struktur eines Angriff-Objekts:**
  { "name": "String", "typ": "Nahkampf" | "Fernkampf", "to_hit_bonus": "Integer", "schaden_basis": "Integer", "bemerkung": "String (Optional)" }
- **Berechnungsformeln für `to_hit_bonus` (verbindlich):**
  - **Nahkampf:** `attribute.str + Boni`
  - **Fernkampf:** `attribute.ges + Boni`

---

### 8. Berufe (Referenz für Charaktererstellung)
| Beruf         | Attributsmodifikatoren     | Erlernte Fähigkeiten                               |
|---------------|----------------------------|---------------------------------------------------|
| Söldner       | STR +2, KON +1, INT -1     | Umgang mit improvisierten Waffen                  |
| Jäger         | GES +2, WIS +1, CHA -1     | Spuren lesen (+2)                                 |
| Schmied       | STR +2, KON +1, GES -1     | Wartung                                           |
| Stadtwache    | STR +1, KON +2, GES -1     | Beschützerinstinkt                                |
| Seefahrer     | GES +1, KON +2, INT -1     | Resistenz gegen Gifte und Krankheiten             |
| Geistlicher   | WIS +2, CHA +1, STR -1     | Untote vertreiben, Geistheilung                   |
| Bibliothekar  | INT +2, KON -1, WIS +1     | Gegenstand identifizieren, Monsterkunde           |
| Barde         | CHA +2, GES +1, STR -1     | Lied des Mutes                                    |
| Händler       | CHA +2, INT +1, STR -1     | Auge des Wucherers                                |
| Dorfheiler    | INT +1, WIS +2, STR -1     | Leichte Wunden versorgen, Krankheit heilen        |
| Hexenjäger    | WIS +2, STR +1, INT -1     | Glaubensstärke, Hexenbann                         |

---

### 9. Klassen (Referenz für Charaktererstellung)
| Klasse     | Attributsmodifikatoren     | Fähigkeiten nach Stufe                                 |
|------------|----------------------------|-------------------------------------------------------|
| Krieger    | STR+1, KON+1, INT-1, WIS-1 | Stufe 1: Kampf-Fokus                                  |
| Waldläufer | GES+1, WIS+1, INT-1, CHA-1 | Stufe 1: Zielen; Stufe 3: Taktischer Rückzug (Reaktion) |
| Kleriker   | WIS+1, CHA+1, STR-1, GES-1 | Stufe 1: Untote vertreiben                            |
| Magier     | INT+1, WIS+1, STR-1, KON-1 | (Fähigkeiten für Magier noch zu definieren)           |

---

### 10. Beschreibungen der Fähigkeiten (Referenz)
(Die Liste der Fähigkeitsbeschreibungen bleibt unverändert und wird hier der Kürze halber nicht wiederholt.)

---

### Minimal-Template (zum Ausfüllen durch die KI)
(Das Template bleibt unverändert.)
