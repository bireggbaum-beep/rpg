# Statblock Spezifikation – Spielcharakter (SC) v0.1
=============================================

## Zweck
Einheitliche Regeln und eine feste Datenstruktur für die Erstellung und Verwaltung von Spielcharakteren (SCs). Dieses Dokument stellt sicher, dass Charaktere, die von Menschen oder KIs erstellt werden, konsistent, regelkonform und für digitale Tools lesbar sind. Es dient als maßgebliche Anleitung für jeden Generator.

## Grundprinzipien
1.  **Datenintegrität:** Die Spezifikation definiert Pflichtfelder, Datenformate und exakte Berechnungsformeln. Alle abgeleiteten Werte MÜSSEN strikt nach diesen Formeln berechnet werden.
2.  **Quellen der Macht:** Die Boni und Fähigkeiten eines Charakters stammen aus drei klar getrennten Quellen: **Volk**, **Beruf** und **Klasse**. Diese MÜSSEN in den dafür vorgesehenen Datenstrukturen erfasst werden.
3.  **Hierarchie der Erstellung:** Die Charaktererstellung folgt einer festen Reihenfolge:
    1.  Basis-Charakter (alle Attribute auf 0).
    2.  Volk anwenden (modifiziert Attribute und fügt Fähigkeiten hinzu).
    3.  Beruf anwenden (modifiziert Attribute und fügt Fähigkeiten hinzu).
    4.  Klasse anwenden (bestimmt LP-Formel und fügt Fähigkeiten hinzu).
    5.  Attributs-Capping anwenden.
    6.  Alle abgeleiteten Werte berechnen.

---

## Top-Level-Felder (Datenstruktur)
Jeder Spielcharakter MUSS als ein einzelnes JSON-Objekt dargestellt werden, das exakt dieser Struktur folgt.

- `name`: String (Name des Charakters)
- `spieler`: String (Name des Spielers, kann "KI" sein)
- `konzept`: String (Eine kurze Beschreibung des Charakters, z.B. "Ehrgeiziger Söldner aus den Grenzlanden")
- `stufe`: Integer (Aktuelle Stufe des Charakters)
- `ep`: Integer (Aktuelle Erfahrungspunkte)
- `volk`: String (Name des Volks, z.B. "Mensch", "Zwerg")
- `beruf`: String (Name des Berufs, z.B. "Schmied", "Gelehrter")
- `klasse`: String (Name der Klasse, z.B. "Krieger", "Magier")
- `attribute`: Objekt (Die sechs Kernattribute. Siehe Sektion 1)
- `abgeleitete_werte`: Objekt (Berechnete Werte wie LP, INI, BEW. Siehe Sektion 2)
- `abwehr`: Objekt (Verteidigungswerte PA, ASW, SR. Siehe Sektion 3)
- `rettungswuerfe`: Objekt (Boni für Rettungswürfe. Siehe Sektion 4)
- `angriffe`: Array von Angriffsobjekten (Siehe Sektion 5)
- `faehigkeiten`: Objekt (Strukturierte Liste der Fähigkeiten nach Quelle. Siehe Sektion 6)
- `ausruestung`: Array von Ausrüstungsobjekten (Siehe Sektion 7)
- `inventar`: Array von Gegenstandsobjekten
- `waehrung`: Objekt (z.B. `{ "gold": 10, "silber": 50 }`)

---

### 1. Attribute (`attribute`)
Die sechs Kernattribute. Sie sind die Grundlage für alle Berechnungen.

- **Struktur:**

  "attribute": {
    "str": "Integer",
    "ges": "Integer",
    "kon": "Integer",
    "int": "Integer",
    "wis": "Integer",
    "cha": "Integer"
  }

- **Regeln für Stufe 1:**
  1.  Alle Attribute starten auf `0`.
  2.  Modifikatoren aus Volk und Beruf werden addiert.
  3.  **Capping (Deckelung):** Nach Anwendung aller Modifikatoren MUSS jedes Attribut auf einen Wert zwischen **-1 (Minimum)** und **+3 (Maximum)** angepasst werden.

- **Regeln für Stufenanstieg:**
  1.  Bei jedem Stufenanstieg wird genau ein Attribut nach Wahl des Spielers um `+1` erhöht.

---

### 2. Abgeleitete Werte (`abgeleitete_werte`)
Werte, die sich dynamisch aus Attributen und Stufe berechnen. RUNDEN ist mathematisches Runden (ab .5 aufrunden).

- **Struktur:**

  "abgeleitete_werte": {
    "lp_max": "Integer",
    "lp_aktuell": "Integer",
    "ini_bonus": "Integer",
    "bew": "Integer"
  }

- **Berechnungsformeln (verbindlich):**
  - `ini_bonus`: `round((attribute.ges + attribute.wis) / 2)`
  - `bew`: `4 + round(ini_bonus / 2)`
  - `lp_max`:
    - **Krieger:** `14 + 2 * (attribute.kon + stufe)`
    - **Waldläufer:** `12 + attribute.kon + 2 * stufe`
    - **Kleriker:** `12 + attribute.kon + 2 * stufe`
    - **Magier:** `10 + attribute.kon + stufe`

---

### 3. Abwehr (`abwehr`)
Werte zur Verteidigung gegen Angriffe.

- **Struktur:**

  "abwehr": {
    "pa": "Integer",
    "asw": "Integer",
    "sr": {
      "total": "Integer",
      "quellen": [
        { "quelle": "String", "wert": "Integer" }
      ]
    }
  }

- **Berechnungsformeln (verbindlich):**
  - `pa`: `9 + attribute.str + Boni` (Summe aller Boni aus Ausrüstung und Fähigkeiten)
  - `asw`: `9 + attribute.ges + round(attribute.wis / 2) + Boni` (Summe aller Boni)
  - `sr.total`: Summe aller `wert` aus `sr.quellen`.

---

### 4. Rettungswürfe (`rettungswuerfe`)
Die Boni, die auf einen W20-Wurf addiert werden, um Effekten zu widerstehen.

- **Struktur:**

  "rettungswuerfe": {
    "rz_bonus": "Integer",
    "rr_bonus": "Integer",
    "rw_bonus": "Integer"
  }

- **Berechnungsformeln (verbindlich):**
  - `rz_bonus` (Zähigkeit): `round((attribute.kon + attribute.str) / 2)`
  - `rr_bonus` (Reflexe): `round((attribute.ges + attribute.wis) / 2)`
  - `rw_bonus` (Willenskraft): `round((attribute.wis + attribute.int) / 2)`

---

### 5. Angriffe (`angriffe`)
Definition der Standardangriffe des Charakters, basierend auf ausgerüsteten Waffen.

- **Struktur eines Angriff-Objekts:**

  {
    "name": "String",
    "typ": "Nahkampf" | "Fernkampf",
    "to_hit_bonus": "Integer",
    "schaden_basis": "Integer",
    "bemerkung": "String (Optional)"
  }

- **Berechnungsformeln für `to_hit_bonus` (verbindlich):**
  - **Nahkampf:** `attribute.str + Boni`
  - **Fernkampf:** `attribute.ges + Boni`

- **Hinweis zur Schadensberechnung (für die Spiel-Engine, nicht den Statblock):**
  - Schaden = `schaden_basis + (W20 + to_hit_bonus) - Abwehrwert_Gegner - SR_Gegner`

---

### 6. Fähigkeiten (`faehigkeiten`)
Strukturierte Liste aller besonderen Eigenschaften, getrennt nach ihrer Herkunft. Dies ist entscheidend für die Nachvollziehbarkeit.

- **Struktur:**

  "faehigkeiten": {
    "volk": [ { "name": "String", "beschreibung": "String" } ],
    "beruf": [ { "name": "String", "beschreibung": "String" } ],
    "klasse": [ { "name": "String", "beschreibung": "String" } ]
  }

- **Anforderung:** Jede Fähigkeit, die einen mechanischen Bonus gewährt (z.B. "+1 auf PA"), muss diesen Bonus klar in der `beschreibung` ausweisen.

---

### 7. Ausrüstung (`ausruestung`)
Gegenstände, die der Charakter aktiv trägt und die Boni gewähren.

- **Struktur eines Ausrüstungsobjekts:**

  {
    "name": "String",
    "typ": "Waffe" | "Rüstung" | "Schild" | "Anderes",
    "boni": [
      { "typ": "PA" | "ASW" | "SR" | "NK_Angriff" | "FK_Angriff", "wert": "Integer" }
    ],
    "schaden_basis": "Integer (nur für Waffen)"
  }

---

### Minimal-Template (zum Ausfüllen durch die KI)

{
  "name": "",
  "spieler": "KI",
  "konzept": "",
  "stufe": 1,
  "ep": 0,
  "volk": "",
  "beruf": "",
  "klasse": "",
  "attribute": { "str": 0, "ges": 0, "kon": 0, "int": 0, "wis": 0, "cha": 0 },
  "abgeleitete_werte": { "lp_max": 0, "lp_aktuell": 0, "ini_bonus": 0, "bew": 0 },
  "abwehr": {
    "pa": 0,
    "asw": 0,
    "sr": { "total": 0, "quellen": [] }
  },
  "rettungswuerfe": { "rz_bonus": 0, "rr_bonus": 0, "rw_bonus": 0 },
  "angriffe": [],
  "faehigkeiten": {
    "volk": [],
    "beruf": [],
    "klasse": []
  },
  "ausruestung": [],
  "inventar": [],
  "waehrung": { "gold": 0, "silber": 0, "kupfer": 0 }
}
