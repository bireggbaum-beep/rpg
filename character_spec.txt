Statblock Spezifikation – Spielcharakter (SC) v0.8
Aufbauend auf v0.5 → v0.6 → v0.7 — vollständige, maschinen- und KI-generatorfreundliche Spezifikation

Hinweis: Währung ist ausschließlich Gold (GM). Referenzpreise und Gegenstandswerte stammen aus der Ausrüstungstabelle (z. B. Langschwert 80 GM, Kettenhemd 140 GM, Holzschild 15 GM) [[11]].

==============================
1. Zweck & Grundprinzipien
==============================
Zweck:
- Einheitliche Regeln und eine feste, maschinenlesbare Datenstruktur für die algorithmische Erzeugung von Spielercharakteren (SC) durch eine KI/Generator.
- Primärer Fokus: Erstellung konsistenter Stufe‑1‑Charaktere; Regeln enthalten Support für Level‑Ups (bis mind. Stufe 3+, skalierbar).

Grundprinzipien:
- Algorithmische Generierung: Schritte in Sektion 2 sind verbindlich für den Generator.
- Datenintegrität: Alle abgeleiteten Werte müssen exakt nach Formeln berechnet werden (Abrundung: floor).
- Quellen der Boni: Volk, Beruf, Klasse — getrennt nach Herkunft dokumentiert.

==============================
2. Gesamtablauf / Generator‑Pipeline (verbindlich)
==============================
1. Initialisierung
   - Erzeuge leeres Charakterobjekt.
   - Setze alle sechs Kernattribute auf 0:
     attribute = { str:0, ges:0, kon:0, int:0, wis:0, cha:0 }

2. Volk wählen
   - Wende Volksmodifikatoren an (Menschen: Fokuswahl Sektion 8.1).
   - Trage Volkseigenschaften in faehigkeiten.volk ein.

3. Beruf wählen
   - Wende Berufsmodifikatoren an.
   - Trage Berufs-Fähigkeiten in faehigkeiten.beruf ein.
   - Markiere 1–2 berufsrelevante Startgegenstände (werden beim Einkauf priorisiert).

4. Klasse wählen
   - Wende Klassenmodifikatoren an.
   - Trage Stufe‑1‑Fähigkeit(en) in faehigkeiten.klasse (stufe_erhalten: 1).

5. Attributs‑Capping (nur beim Erstellen Stufe 1)
   - Nach Anwendung aller Modifikatoren: clamp(each attribute, -1, +3).
   - Capping gilt ausschließlich bei initialer Erstellung von Stufe‑1‑Charakteren.

6. Abgeleitete Werte berechnen (siehe Sektion 5,6,7)
   - Berechne abgeleitete_werte, abwehr, rettungswuerfe, angriffe nach verbindlichen Formeln (Abrunden: floor).

7. Startausrüstung generieren / Einkauf (siehe Sektion 9)
   - Generiere Startgold nach Klasse.
   - Ziehe berufsitems ab, kaufe Waffe + Rüstung/Schutz + Restausrüstung nach Konzept / Budget.
   - Restgeld in waehrung.gold.

8. Finale Validierung & Ausgabe
   - Validierungs-Checks (siehe Sektion 14).
   - Ausgabe des finalen JSON‑Objekts.

==============================
3. Top-Level-JSON-Struktur (Schema)
==============================
{
  "name": "String",
  "spieler": "String",
  "konzept": "String",
  "stufe": Integer,
  "ep": Integer,
  "volk": "String",
  "beruf": "String",
  "klasse": "String",
  "attribute": { "str": Integer, "ges": Integer, "kon": Integer, "int": Integer, "wis": Integer, "cha": Integer },
  "abgeleitete_werte": { "lp_max": Integer, "lp_aktuell": Integer, "ini_bonus": Integer, "bew": Integer },
  "abwehr": { "pa": Integer, "asw": Integer, "sr": { "total": Integer, "quellen":[ { "quelle": "String", "wert": Integer } ] } },
  "rettungswuerfe": { "rz_bonus": Integer, "rr_bonus": Integer, "rw_bonus": Integer },
  "angriffe": [ { "name":"String", "typ":"Nahkampf"|"Fernkampf", "to_hit_bonus": Integer, "schaden_basis": Integer, "bemerkung":"String" } ],
  "faehigkeiten": { "volk": [], "beruf": [], "klasse": [] },
  "ausruestung": [ { "name":"String", "typ":"Waffe"|"Rüstung"|"Schild"|"Anderes", "preis": Integer, "gewicht": Number, "boni":[ { "typ":"PA"|"ASW"|"SR"|"NK_Angriff"|"FK_Angriff"|"RZ"|"RR"|"RW", "wert": Integer, "quelle": "String" } ], "schaden_basis": Integer?, "beschreibung":"String" } ],
  "inventar": [],
  "custom_items": [],      // neu: vom Generator erzeugte Items mit Metadaten
  "waehrung": { "gold": Integer },
  "validation_log": []    // optional: Änderung/Validierungsprotokoll
}

Bemerkung: "boni" ist optional, wird aber empfohlen für Auditierbarkeit. "preis" und "gewicht" müssen bei Ausrüstungsobjekten vorhanden sein.

==============================
4. Attribute (Regeln)
==============================
- Struktur: attribute = { str, ges, kon, int, wis, cha } (Integer).
- Stufe‑1 Erstellung:
  - Startwerte 0 → addiere Modifikatoren (volk, beruf, klasse) → Capping auf [-1, +3].
- Stufenanstieg (ab Stufe 2):
  - Spielercharaktere: Spieler wählt bei Level‑Up frei ein Attribut +1 (keine Capping-Anwendung nach Stufe 1).
  - KI/Generator/Batch: Generator wählt +1 auf ein Attribut, das konzept‑konform ist; Klassenprioritäten können heuristisch dienen, sind aber nicht zwingend.
- Jede Änderung dokumentieren (validation_log).

==============================
5. Abgeleitete Werte (Formeln und Rundung)
==============================
Rundungsregel (bindend):
- Alle Mittelwerte/Divisionen verwenden floor (Abrunden). Beispiel: floor((ges + wis) / 2).

Formeln:
- ini_bonus = floor((attribute.ges + attribute.wis) / 2)
- bew = 4 + floor(ini_bonus / 2)
- lp_max (klassenabhängig):
  - Krieger: lp_max = 14 + 2 * (attribute.kon + stufe)
  - Waldläufer / Kleriker: lp_max = 12 + attribute.kon + 2 * stufe
  - Magier: lp_max = 10 + attribute.kon + stufe

lp_aktuell:
- Bei Erstellung: lp_aktuell := lp_max.
- Beim Level‑Up: Generator berechnet neues lp_max (mit neuer stufe) und speichert es. Generator ändert lp_aktuell nicht automatisch (keine Auf-/Abrechnung).

==============================
6. Abwehr (PA / ASW / SR) — Berechnung & Stacking
==============================
Definition zulässiger Bonustypen (case-sensitive):
- "PA"         — Parade/Paradewert (zusätzlicher Bonus auf PA)
- "ASW"        — Ausweichwert
- "SR"         — Schadenreduktion / Rüstungswert
- "NK_Angriff" — Nahkampf-Angriffbonus
- "FK_Angriff" — Fernkampf-Angriffbonus
- "RZ"         — Zähigkeit‑Rettungswurf (rz_bonus)
- "RR"         — Reflexe‑Rettungswurf (rr_bonus)
- "RW"         — Willenskraft‑Rettungswurf (rw_bonus)

Boni‑Quellen (Definition):
- Ausrüstung (Rüstung, Schilde, Waffen-Boni)
- Fähigkeiten (volk / beruf / klasse), falls numerisch spezifiziert
- Permanente Rassenboni
- Magische / benannte Items
- Temporäre Effekte (Zauber/Tränke) werden NICHT in der Basis‑Generierung berücksichtigt

Stacking‑Regel (bindend):
- Alle Boni gleichen Typs summieren sich additiv (inkl. negativer Werte). Beispiel: mehrere SR‑Quellen → sr.total = Summe aller SR‑Werte.

Berechnungsvorgehen (bindend):
1. pa_basis = 9 + attribute.str
2. asw_basis = 9 + attribute.ges + floor(attribute.wis / 2)
3. Sammle alle boni (aus ausruestung[].boni und faehigkeiten.*[].boni)
4. Summiere per typ:
   - pa = pa_basis + sum(PA‑Boni)
   - asw = asw_basis + sum(ASW‑Boni)
   - sr.total = sum(SR‑Boni)
5. Negative Boni (z. B. ASW‑Malus einer Rüstung oder eines Schildes) wirken als negative Werte in der Summe.
6. Notiere addierte Quellen im validation_log.

Beispiel:
- Kettenhemd (SR 3, ASW‑Malus −1) und Holzschild (PA +1):
  - pa = 9 + attribute.str + 1
  - asw = 9 + attribute.ges + floor(attribute.wis/2) − 1
  - sr.total = 3

==============================
7. Rettungswürfe (Formeln) & Verteidigung gegen Magie
==============================
Formeln (Abrunden / floor):
- rz_bonus (Zähigkeit) = floor((attribute.kon + attribute.str) / 2)
- rr_bonus (Reflexe) = floor((attribute.ges + attribute.wis) / 2)
- rw_bonus (Willenskraft) = floor((attribute.wis + attribute.int) / 2)

Verteidigung gegen magische Angriffe (Mechanik):
- Verteidiger würfelt W20 und addiert passenden Rettungsbonus (rz/rr/rw).
- Trefferbedingung: W20 + rettungsbonus ≥ Zielwert_total.
- Zielwert_total = Zielwert_basis_des_Effekts + Stufe_des_wirkenden_Magiers.
  - Zielwert_basis_des_Effekts ist im Zauber/Effekt angegeben (z. B. "ZW 10 + Grad des Zaubers"); wenn nicht angegeben, gilt standardmäßig ZW_basis = 10 (Empfehlung: explizit in Zauber‑Spec definieren).
- Beispiel: Effekt-Basis ZW 12, Wirkender Magier Stufe 4 → Zielwert_total = 16.

Hinweis: Boni auf Rettungswürfe (typ "RZ"/"RR"/"RW") werden additiv angewandt.

==============================
8. Angriffe (To-Hit & Schaden)
==============================
- Angriff-Objekt:
  { "name":"String", "typ":"Nahkampf"|"Fernkampf", "to_hit_bonus": Integer, "schaden_basis": Integer, "bemerkung":"String" }

- to_hit_bonus:
  - Nahkampf: attribute.str + sum(NK_Angriff‑Boni)
  - Fernkampf: attribute.ges + sum(FK_Angriff‑Boni)
  - Zusätzliche Boni aus Fähigkeiten/Rüstung/Waffen (z. B. Waffe mit NK_Angriff) werden additiv berücksichtigt.

- schaden_basis:
  - Wird aus Ausrüstungstabelle oder custom_item gesetzt (z. B. Langschwert Schaden 6, Kurzbogen 3) [[11]].
  - Schadenstypen/Tage/Tags ggf. in ausruestung.beschreibung dokumentieren.

==============================
9. Startgold & Einkauf (Schritt 7 detailliert)
==============================
Startgold (Formeln):
- Krieger: 150 + 3W6 × 10 GM  (Bereich 180 .. 330 GM)
- Waldläufer: 120 + 3W6 × 10 GM  (Bereich 150 .. 300 GM)
- Kleriker: 120 + 3W6 × 10 GM  (Bereich 150 .. 300 GM)
- Magier: 80 + 2W6 × 10 GM  (Bereich 100 .. 200 GM)

Berufsitems:
- Generator weist jedem Charakter 1–2 berufsrelevante Gegenstände zu (vor dem Kauf vorrangig).

Einkaufspriorität (Algorithmus):
1. Pflicht: Waffe passend zur Klasse.
2. Schutz: Rüstung und/oder Schild (sofern für die Klasse erlaubt).
3. Berufsgegenstände (vorgemerkte).
4. Komfort/Utility: Seil, Rationen, Laterne, Werkzeug.
5. Variation: Generator darf Alternativen wählen (z. B. Dolch vs. Kurzschwert), Gesamtpreis ≤ Startgold.
- Referenzpreise entstammen der Ausrüstungstabelle (z. B. Langschwert 80 GM, Kettenhemd 140 GM, Holzschild 15 GM) [[11]].
- Verbleibendes Gold → waehrung.gold.

==============================
10. Regeln für neu generierte (custom) Items
==============================
Wenn Generator neue Items erzeugt, MUSS jedes custom_item enthalten:
- name, typ, preis (GM), gewicht, mechanische Werte (Schaden / SR / PA / ASW / RZ/RR/RW‑Boni), beschreibung, availability.
- Preisbildung (bindend): Finde Referenzitem(s) aus Tabelle; setze Preis_new = round(median(Referenzpreise) × factor) mit factor ∈ [0.8, 1.2] standardmäßig (±20%).
- Speichere custom_items im Feld "custom_items" mit Referenz‑IDs/Begründung.
- Dokumentiere Referenzen/Algorithmus im validation_log.

==============================
11. Level‑Up (Stufenanstiege) — Regeln
==============================
EP‑Schwellen: Verwende bestehende Tabelle (Stufe 2 = 600 EP, Stufe 3 = 1400 EP, ... ) [[11]].

Attributssteigerung:
- Spielercharaktere: Spieler wählt frei +1 auf ein Attribut bei jeder Stufensteigerung.
- KI/Generator/Batch: Generator wählt +1 auf ein Attribut, das dem Konzept der Figur entspricht. Klassen‑Prioritäten dürfen als Heuristik verwendet werden, sind jedoch kein striktes Muss.
- Capping gilt nur bei initialer Erstellung Stufe 1; danach keine Cap.

LP beim Level‑Up:
- Beim Level‑Aufstieg berechne lp_max neu mit der Klassenformel (unter Verwendung der aktuellen attribute.kon und neuen stufe). Speichere lp_max. lp_aktuell bleibt unverändert durch Generator.

Klassenfähigkeiten:
- Automatisch freischalten bei Stufen: 1, 3, 6, 9.
- Generator trägt Fähigkeit in faehigkeiten.klasse ein: { "name": "...", "beschreibung": "...", "stufe_erhalten": N }.

==============================
12. Klassenfähigkeiten — Addendum (Editierbares Modul)
==============================
Format: { "name": "String", "beschreibung": "String", "stufe_erhalten": Integer }

Krieger:
- { "name":"Kampf-Fokus", "beschreibung":"1x/Begegnung: Freie Aktion → nächsten Nahkampfangriff mit Vorteil.", "stufe_erhalten":1 }
- { "name":"Stoßschutz", "beschreibung":"1x/Kampf: Reaktion → +2 PA für 1 Runde.", "stufe_erhalten":3 }
- { "name":"Zweiter Wind", "beschreibung":"1x/lange Rast: Aktion → Heile 1W8 + KON LP.", "stufe_erhalten":6 }
- { "name":"Rundumschlag", "beschreibung":"1x/Begegnung: Aktion → Flächen-Nahkampfangriff: Gegner in 2m erleiden 1W6 + STR Schaden.", "stufe_erhalten":9 }

Waldläufer:
- { "name":"Zielen", "beschreibung":"Ziel-Aktion: +1 auf nächsten Fernkampfangriff; kumulativ bis +3; verfällt bei Bewegung/anderer Aktion.", "stufe_erhalten":1 }
- { "name":"Taktischer Rückzug", "beschreibung":"Reaktion: Bei Nahkampfangriff → bis halbe Bewegungsrate wegbewegen; keine Gelegenheitsangriffe.", "stufe_erhalten":3 }
- { "name":"Meister der Deckung", "beschreibung":"+1 ASW in leichter Deckung; +1 auf Fernkampfangriffe gegen von dir entdeckte Ziele.", "stufe_erhalten":6 }
- { "name":"Scharfschützenblick", "beschreibung":"+2 auf Fernkampfangriffe gegen Ziele außerhalb Nahkampfreichweite, wenn du nicht in Bewegung warst.", "stufe_erhalten":9 }

Kleriker:
- { "name":"Untote vertreiben", "beschreibung":"1x/Tag: Aktion → Untote in Sicht: RW Willenskraft (ZW 12) oder fliehen 1W6 Runden.", "stufe_erhalten":1 }
- { "name":"Heiliger Segen", "beschreibung":"3x/Tag: Aktion → Heilt Verbündeten in Berührung 1W4 + WIS LP.", "stufe_erhalten":3 }
- { "name":"Geistheilung (verbessert)", "beschreibung":"3x/Tag: Aktion (2 AP): WIS-Probe (ZW 11); Erfolg → Heile 1W6 + WIS LP.", "stufe_erhalten":6 }
- { "name":"Göttlicher Bann", "beschreibung":"1x/Tag: Stärkere Vertreibung/Unterdrückung (exakte Mechanik GM‑definiert).", "stufe_erhalten":9 }

Magier:
- { "name":"Zauberfokus (Basis)", "beschreibung":"Start mit 2 Cantrips und 2 vorbereiteten Stufe‑1-Zaubern. (Zauber‑Mechanik separat spezifizieren).", "stufe_erhalten":1 }
- { "name":"Runenverstärker", "beschreibung":"1x/Begegnung: +1 auf einen Zauberangriff oder Wirke ein vorbereitetes Ritual (GM‑Regel).", "stufe_erhalten":3 }
- { "name":"Erweiterter Zauberfokus", "beschreibung":"1x/lange Rast: Einen vorbereiteten Zauber Stufe ≤2 temporär +1 Wirkungsstärke.", "stufe_erhalten":6 }
- { "name":"Meisterhafte Formel", "beschreibung":"Zugang zu Stufe‑3‑Zauberplatz oder vergleichbare Skalierung (Zauber‑Spec ergänzen).", "stufe_erhalten":9 }

Hinweis: Addendum ist editierbar; exakte numerische Details (AP‑Kosten, SG‑Werte, Wirkungsdauern) sollten vor verbindlicher Anwendung ggf. finalisiert werden.

==============================
13. Schilde / Waffen mit Malussen (Spezifikation)
==============================
- Keine zusätzlichen Top‑Level Felder notwendig; negative Effekte/Malusse sind als negative Einträge im ausruestung[].boni Array zu führen (z. B. ASW −2).
- Beispiel Turmschild (aus Ausrüstungstabelle: PA +3, Preis 85 GM):
{
  "name": "Turmschild",
  "typ": "Schild",
  "preis": 85,
  "gewicht": 10,
  "boni": [
    { "typ": "PA", "wert": 3, "quelle": "Turmschild" },
    { "typ": "ASW", "wert": -2, "quelle": "Turmschild ASW Malus" },
    { "typ": "RR", "wert": -1, "quelle": "Turmschild Reflexe Malus" }
  ],
  "beschreibung": "Großer Schild: +3 PA, ASW −2, RR −1."
}
- Waffeneigenschaften, die PA/Andere beeinflussen, ebenfalls über boni abbilden (z. B. Parierklinge -> PA +1).

==============================
14. Validierung / Konsistenzchecks (Pflicht)
==============================
Vor Finaler Ausgabe MUSS der Generator prüfen:
- waehrung.gold ≥ 0
- Summe Ausrüstungskosten ≤ Startbudget (Startgold minus evtl. Berufsitems)
- attribute sind Integer
- lp_max konsistent mit Klasse und Stufe
- Jedes Ausrüstungsobjekt hat: name, typ, preis, gewicht, mechanische Werte
- Wenn ausruestung[].boni vorhanden: jedes boni-Element hat gültigen "typ" und Integer "wert" (kann negativ sein) und "quelle" string
- validation_log enthält Aufschlüsselung der addierten Boni (Quelle, typ, wert)

Optional/Empfohlen:
- Generator legt Änderungsprotokoll an: ["step":"...", "changes":{...}] zur Nachvollziehbarkeit.
- custom_items dokumentieren Referenzen und Preisbildungsformel.

==============================
15. Minimal-Template (aktualisiert JSON)
==============================
{
  "name": "",
  "spieler": "KI",
  "konzept": "",
  "stufe": 1,
  "ep": 0,
  "volk": "",
  "beruf": "",
  "klasse": "",
  "attribute": { "str": 0, "ges": 0, "kon": 0, "int": 0, "wis": 0, "cha": 0 },
  "abgeleitete_werte": { "lp_max": 0, "lp_aktuell": 0, "ini_bonus": 0, "bew": 0 },
  "abwehr": { "pa": 0, "asw": 0, "sr": { "total": 0, "quellen": [] } },
  "rettungswuerfe": { "rz_bonus": 0, "rr_bonus": 0, "rw_bonus": 0 },
  "angriffe": [],
  "faehigkeiten": { "volk": [], "beruf": [], "klasse": [] },
  "ausruestung": [],
  "inventar": [],
  "custom_items": [],
  "waehrung": { "gold": 0 },
  "validation_log": []
}

==============================
16. Implementierungs-Hinweise / Pseudocode-Hints
==============================
- Trennung der Modifikatoren: store volk_modifiers, beruf_modifiers, klasse_modifiers separately for provenance.
- Reihenfolge: apply Volk → Beruf → Klasse to attributes.
- Nach Capping (nur wenn stufe == 1) recompute derived values.
- Einkaufsalgorithmus: reserve Berufsitems, then buy Weapon → Armor/Shield → Utility until budget exhausted.
- Bei custom_items: store "reference_basis": [ ids ] and "pricing_factor" used.

==============================
17. Referenzdaten / Beispiele
==============================
- Item- & Preisreferenzen stammen aus der Ausrüstungsdatei (Beispiele: Langschwert 80 GM, Kettenhemd 140 GM, Holzschild 15 GM, Kurzbogen 35 GM) [[11]].
- Rüstungs‑ und Schildeinträge incl. ASW‑Malus und PA‑Werte sind in der Tabelle definiert und müssen vom Generator verwendet werden (z. B. Plattenrüstung ASW‑Malus −2, Preis 290 GM) [[11]].

------------------------------
Ende Spec v0.8
------------------------------
