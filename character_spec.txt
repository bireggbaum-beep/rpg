Statblock Spezifikation – Spielcharakter (SC) v0.6
Aufbauend auf v0.5 — vollständige, maschinen- und KI-generatorfreundliche Spezifikation

Hinweis: Währung ist ausschließlich Gold (GM). Referenzpreise und Gegenstandswerte stammen aus der Ausrüstungstabelle (z. B. Langschwert 80 GM, Kettenhemd 140 GM, Holzschild 15 GM) [[11]].

==============================
1. Zweck & Grundprinzipien
==============================
Zweck:
- Einheitliche Regeln und Datenstruktur für algorithmische Erzeugung von Spielercharakteren (SC) durch eine KI/Generator.
- Ziel: Startcharaktere Stufe 1 (später auch bis Stufe 3+) konsistent, nachvollziehbar und maschinenlesbar erstellen.

Grundprinzipien (kurz):
- Algorithmische Generierung: Schritte in Sektion 2 sind verbindlich.
- Datenintegrität: Alle abgeleiteten Werte müssen exakt nach Formeln berechnet werden.
- Quellen der Boni: Volk, Beruf, Klasse – getrennt erfassbar.

==============================
2. Gesamtablauf / Generator‑Pipeline (verbindlich)
==============================
1. Initialisierung
   - Erzeuge leeres Charakterobjekt.
   - Setze alle sechs Kernattribute auf 0:
     attribute = { str:0, ges:0, kon:0, int:0, wis:0, cha:0 }

2. Volk wählen
   - Wende Volksmodifikatoren an (Menschen: Fokuswahl Sektion 8.1).
   - Trage Volkseigenschaften in faehigkeiten.volk ein.

3. Beruf wählen
   - Wende Berufsmodifikatoren an.
   - Trage Berufs-Fähigkeiten in faehigkeiten.beruf ein.
   - Markiere 1–2 berufsrelevante Startgegenstände (werden beim Einkauf priorisiert).

4. Klasse wählen
   - Wende Klassenmodifikatoren an.
   - Trage Stufe-1-Fähigkeit(en) in faehigkeiten.klasse (stufe_erhalten: 1).

5. Attributs-Capping (nur beim Erstellen eines Stufe‑1-Charakters)
   - Nach Anwendung aller Modifikatoren: clamp(each attribute, -1, +3).
   - Hinweis: Dieses Capping gilt NUR bei Startcharakteren Stufe 1. Nicht mehr bei späteren Stufen.

6. Abgeleitete Werte berechnen (siehe Sektion 4,5,6)
   - Berechne abgeleitete_werte, abwehr, rettungswuerfe, angriffe nach verbindlichen Formeln.

7. Startausrüstung generieren / Einkauf (siehe Sektion 3.1 Startgold & Einkauf)
   - Generiere Startgold nach Klasse.
   - Ziehe berufsitems ab, kaufe Waffe + Rüstung/Schutz + Restausrüstung nach Konzept / Budget.
   - Restgeld in waehrung.gold.

8. Finale Validierung & Ausgabe
   - Validierungs-Checks (siehe Sektion 9).
   - Ausgabe des finalen JSON-Objekts.

==============================
3. Top-Level-JSON-Struktur (Schema)
==============================
{
  "name": "String",
  "spieler": "String",
  "konzept": "String",
  "stufe": Integer,
  "ep": Integer,
  "volk": "String",
  "beruf": "String",
  "klasse": "String",
  "attribute": { "str": Integer, "ges": Integer, "kon": Integer, "int": Integer, "wis": Integer, "cha": Integer },
  "abgeleitete_werte": { "lp_max": Integer, "lp_aktuell": Integer, "ini_bonus": Integer, "bew": Integer },
  "abwehr": { "pa": Integer, "asw": Integer, "sr": { "total": Integer, "quellen":[ { "quelle": "String", "wert": Integer } ] } },
  "rettungswuerfe": { "rz_bonus": Integer, "rr_bonus": Integer, "rw_bonus": Integer },
  "angriffe": [ { "name":"String", "typ":"Nahkampf"|"Fernkampf", "to_hit_bonus": Integer, "schaden_basis": Integer, "bemerkung":"String" } ],
  "faehigkeiten": { "volk": [], "beruf": [], "klasse": [] },
  "ausruestung": [ { "name":"String", "typ":"Waffe"|"Rüstung"|"Schild"|"Anderes", "boni":[ { "typ":"PA"|"ASW"|"SR"|"NK_Angriff"|"FK_Angriff", "wert": Integer } ], "schaden_basis": Integer? } ],
  "inventar": [],
  "custom_items": [],      // neu: vom Generator erzeugte Items mit Metadaten
  "waehrung": { "gold": Integer },
  "validation_log": []    // optional: Änderung/Validierungsprotokoll
}

==============================
4. Attribute (Regeln)
==============================
- Struktur: attribute = { str, ges, kon, int, wis, cha } (Integer)
- Stufe 1 Erstellung:
  - Startwerte 0, addiere Modifikatoren (volk, beruf, klasse), dann Capping [-1, +3] (nur bei Stufe 1).
- Stufenanstieg:
  - Spielercharaktere: Spieler wählt frei +1 auf ein Attribut (kein Capping nach Stufe 1).
  - KI/Generator/Batch: Generator wählt +1 auf das Attribut, das "konzept‑konform" passt (Heuristik: Klassen‑Priorität erlaubt, aber nicht zwingend).
  - Dokumentiere jede Attributsänderung im validation_log.

==============================
5. Abgeleitete Werte (Formeln)
==============================
- ini_bonus = round((attribute.ges + attribute.wis) / 2)
- bew = 4 + round(ini_bonus / 2)
- lp_max (klassenabhängig):
  - Krieger: lp_max = 14 + 2 * (attribute.kon + stufe)
  - Waldläufer / Kleriker: lp_max = 12 + attribute.kon + 2 * stufe
  - Magier: lp_max = 10 + attribute.kon + stufe
- lp_aktuell:
  - Beim Erstellen: Setze lp_aktuell := lp_max.
  - Beim Level‑Up: Generator berechnet neues lp_max mit neuer Stufe; lp_aktuell bleibt unverändert (keine automatische Heilung durch Generator).

==============================
6. Abwehr (PA / ASW / SR)
==============================
- pa = 9 + attribute.str + sum(Boni_from_equipment_and_faehigkeiten)
- asw = 9 + attribute.ges + round(attribute.wis / 2) + sum(Boni_from_equipment_and_faehigkeiten)
- sr.total = sum( sr.quellen[].wert )
- sr.quellen: listet jede Quelle separat, z. B. Rüstung, Fähigkeit, magischer Bonus.

Bemerkung: "Boni" umfassen nur permanente/ausrüstungs-/fähigkeitsgebundene Effekte, keine temporären Zauber-/Trankeffekte in der Basisgenerierung.

==============================
7. Rettungswürfe
==============================
- rz_bonus (Zähigkeit) = round((attribute.kon + attribute.str) / 2)
- rr_bonus (Reflexe) = round((attribute.ges + attribute.wis) / 2)
- rw_bonus (Willenskraft) = round((attribute.wis + attribute.int) / 2)

==============================
8. Angriffe
==============================
- Angriff-Objekt:
  { "name","typ","to_hit_bonus","schaden_basis","bemerkung" }
- to_hit_bonus Berechnung:
  - Nahkampf: attribute.str + sum(Boni from weapon/ability)
  - Fernkampf: attribute.ges + sum(Boni from weapon/ability)
- schaden_basis wird aus Ausrüstungstabelle gesetzt (z. B. Langschwert Schaden 6, Kurzbogen 3) [[11]].
- Bemerkung: Schadens-Tags (Wucht/Hieb/Stich/Panzerbrechend) sollten in ausruestung.item.description vermerkt werden.

==============================
9. Startgold & Einkauf (Schritt 7 detailliert)
==============================
- Startgold (Formeln):
  - Krieger: 150 + 3W6 × 10 GM  (Bereich 180 .. 330 GM)
  - Waldläufer: 120 + 3W6 × 10 GM  (Bereich 150 .. 300 GM)
  - Kleriker: 120 + 3W6 × 10 GM  (Bereich 150 .. 300 GM)
  - Magier: 80 + 2W6 × 10 GM  (Bereich 100 .. 200 GM)

- Berufsitems:
  - Generator weist 1–2 berufsrelevante Gegenstände zu und reserviert/kauft diese zuerst.

- Einkaufsvorgabe (Algorithmus-Hierarchie):
  1. Pflicht: Waffe passend zur Klasse (z. B. Krieger: Schwert; Waldläufer: Bogen).
  2. Schutz: Rüstung bzw. Schild falls für Klasse erlaubt.
  3. Berufsitems (vorher markierte).
  4. Komfort/Utility: Seil, Rationen, Fackeln, Werkzeug.
  5. Variation: innerhalb Budget, aber Gesamtpreis ≤ Startgold.
- Referenzpreise & Gegenstände sind der Ausrüstungstabelle zu entnehmen (siehe Datei) [[11]].
  - Beispielreferenzen: Langschwert 80 GM, Kettenhemd 140 GM, Holzschild 15 GM, Kurzbogen 35 GM, Lederrüstung 45 GM [[11]].
- Restgold: verbleibendes Budget → waehrung.gold.

==============================
10. Regeln für neu generierte (custom) Items
==============================
- Wenn der Generator ein neues Item erstellt, MUSS es enthalten:
  - name, typ, preis (GM), gewicht, mechanische Werte (schaden / SR / PA-Bonus / ASW-Bonus etc.), beschreibung, availability.
- Preisbildung (Vorschlag, verpflichtend): Preis_new = round( median(reference_items_of_same_category_or_power) × factor ), factor ∈ [0.8, 1.2] standardmäßig. Referenzitems werden aus Tabelle entnommen [[11]].
- custom_items werden im Feld "custom_items" mit Metadaten gespeichert.
- Generator protokolliert die Referenz(s), die zur Preisfindung benutzt wurden.

==============================
11. Level‑Up (Stufenanstiege) — Regeln
==============================
- EP-Tabellen verwenden die vorhandene Tabelle (Stufe2: 600 EP, Stufe3: 1400 EP, ... ) [[11]].
- Attributssteigerung:
  - Spielercharaktere: Spieler wählt frei +1 auf ein Attribut bei jedem Stufenanstieg.
  - KI/Generator/Batch: Generator erhöht ein Attribut +1, das zum Konzept passt; Klassen-Prioritäten können heuristisch genutzt, sind aber nicht zwingend.
- Capping: Nur bei Erstellung Stufe 1; danach kein Cap.
- LP-Neuberechnung: lp_max neu berechnen nach Formeln (Sektion 5). lp_aktuell bleibt unverändert durch Generator.

- Klassenfähigkeiten freischalten automatisch beim Erreichen bestimmter Stufen: 1, 3, 6, 9.
  - Der Generator trägt die Fähigkeit mit stufe_erhalten in faehigkeiten.klasse ein.

==============================
12. Klassenfähigkeiten — Addendum (Editierbares Modul)
==============================
Format jedes Eintrags: { "name": "String", "beschreibung": "String", "stufe_erhalten": Integer }

Krieger:
- { "name":"Kampf-Fokus", "beschreibung":"1x/Begegnung: Als freie Aktion kannst du deinen nächsten Nahkampfangriff mit Vorteil ausführen.", "stufe_erhalten":1 }
- { "name":"Stoßschutz", "beschreibung":"1x/Kampf: Als Reaktion erhältst du für 1 Runde +2 auf PA.", "stufe_erhalten":3 }
- { "name":"Zweiter Wind", "beschreibung":"1x/lange Rast: Als Aktion heilst du 1W8 + KON LP.", "stufe_erhalten":6 }
- { "name":"Rundumschlag", "beschreibung":"1x/Begegnung: Aktion: Flächen-Nahkampfangriff: alle Gegner in 2m erleiden 1W6 + STR Schaden.", "stufe_erhalten":9 }

Waldläufer:
- { "name":"Zielen", "beschreibung":"Ziel-Aktion: +1 auf nächsten Fernkampfangriff; kumulativ bis +3; verfällt bei Bewegung/anderer Aktion.", "stufe_erhalten":1 }
- { "name":"Taktischer Rückzug", "beschreibung":"Reaktion: Bei Nahkampfangriff kannst du dich bis halbe Bewegungsrate wegbewegen; provoziert keine Gelegenheitsangriffe.", "stufe_erhalten":3 }
- { "name":"Meister der Deckung", "beschreibung":"+1 ASW in leichter Deckung; +1 auf Fernkampfangriffe gegen von dir entdeckte Ziele.", "stufe_erhalten":6 }
- { "name":"Scharfschützenblick", "beschreibung":"+2 auf Fernkampfangriffe gegen Ziele außerhalb Nahkampfreichweite, wenn du nicht in Bewegung warst.", "stufe_erhalten":9 }

Kleriker:
- { "name":"Untote vertreiben", "beschreibung":"1x/Tag: Aktion: Untote in Sicht müssen RW Willenskraft (ZW 12) bestehen oder für 1W6 Runden fliehen.", "stufe_erhalten":1 }
- { "name":"Heiliger Segen", "beschreibung":"3x/Tag: Aktion: Heilt Verbündeten in Berührung 1W4 + WIS LP.", "stufe_erhalten":3 }
- { "name":"Geistheilung (verbessert)", "beschreibung":"3x/Tag: Aktion (2 AP): WIS-Probe (ZW 11); bei Erfolg heilst du 1W6 + WIS LP.", "stufe_erhalten":6 }
- { "name":"Göttlicher Bann", "beschreibung":"1x/Tag: Stärkere Form der Vertreibung/Unterdrückung (exakte Mechanik GM-definiert).", "stufe_erhalten":9 }

Magier:
- { "name":"Zauberfokus (Basis)", "beschreibung":"Start mit 2 Cantrips und 2 vorbereiteten Stufe-1-Zaubern. (Zauber-Mechanik separat spezifizieren).", "stufe_erhalten":1 }
- { "name":"Runenverstärker", "beschreibung":"1x/Begegnung: +1 auf einen Zauberangriff oder Wirke ein vorbereitetes Ritual (GM-Regel).", "stufe_erhalten":3 }
- { "name":"Erweiterter Zauberfokus", "beschreibung":"1x/lange Rast: Einen vorbereiteten Zauber Stufe ≤2 temporär +1 Wirkungsstärke.", "stufe_erhalten":6 }
- { "name":"Meisterhafte Formel", "beschreibung":"Zugang zu Stufe-3-Zauberplatz oder ähnliche Skalierung (Zauber-Spec ergänzen).", "stufe_erhalten":9 }

Hinweis: Die Fähigkeiten im Addendum sind editierbar; bevor sie verbindlich angewendet werden, sollten exakte numerische Details (AP-Kosten, SG-Werte, Wirkungsdauer) finalisiert werden.

==============================
13. Ausrüstungs- & Preisreferenzen
==============================
- Alle Items, Preise, SR-/Schadenswerte etc. sind der Ausrüstungstabelle entnommen (Beispiel-Daten: Dolch 15 GM Schaden 2; Kurzschwert 40 GM Schaden 4; Langschwert 80 GM Schaden 6; Kurzbogen 35 GM Schaden 3; Lederrüstung 45 GM SR 1; Kettenhemd 140 GM SR 3) [[11]].
- Der Generator benutzt diese Tabelle als Primärquelle für Preiskalkulation und Vergleich bei custom item pricing [[11]].

==============================
14. Validierung / Konsistenzchecks (Pflicht)
==============================
Vor Finaler Ausgabe MUSS der Generator prüfen:
- waehrung.gold ≥ 0
- Summe der Ausrüstungskosten ≤ Startgold (Startgold minus evtl. Berufspaket)
- attribute sind Integer
- lp_max konsistent mit Klasse und Stufe
- Jedes Ausrüstungsobjekt hat: name, typ, preis, gewicht, mechanische Werte
- custom_items enthalten Referenzbasis (Referenzitems), Preisbildungsmethode protokolliert

Optional: Generator kann ein "validation_log" anlegen mit Schritten und Änderungen zur Nachvollziehbarkeit.

==============================
15. Minimal-Template (aktualisiert)
==============================
{
  "name": "",
  "spieler": "KI",
  "konzept": "",
  "stufe": 1,
  "ep": 0,
  "volk": "",
  "beruf": "",
  "klasse": "",
  "attribute": { "str": 0, "ges": 0, "kon": 0, "int": 0, "wis": 0, "cha": 0 },
  "abgeleitete_werte": { "lp_max": 0, "lp_aktuell": 0, "ini_bonus": 0, "bew": 0 },
  "abwehr": { "pa": 0, "asw": 0, "sr": { "total": 0, "quellen": [] } },
  "rettungswuerfe": { "rz_bonus": 0, "rr_bonus": 0, "rw_bonus": 0 },
  "angriffe": [],
  "faehigkeiten": { "volk": [], "beruf": [], "klasse": [] },
  "ausruestung": [],
  "inventar": [],
  "custom_items": [],
  "waehrung": { "gold": 0 },
  "validation_log": []
}

==============================
16. Implementierungs-Hinweise für Entwickler (kurz)
==============================
- Halte Modifikatoren getrennt: store volk_modifiers, beruf_modifiers, klasse_modifiers, damit provenance tracebar ist.
- Beim Anwenden modifizierer: apply in order Volk → Beruf → Klasse.
- Nach Erstellung und Capping: alle abgeleiteten Werte neu berechnen.
- Beim Generator-gekauften Items: verknüpfe item mit referenz (z. B. aus Tabelle) oder markiere als custom_items mit Preisbildungsmetadaten.
- Für Batch-Generierung: Nutze "konzept" Feld zur heuristischen Auswahl (z. B. "Ranged hunter" → favorisiere Kurzbogen & Ges).

------------------------------
Ende Spec v0.6
------------------------------

Quellenhinweis: Primäre Item-/Preis-/Rüstungs- und Waffenwerte entstammen der hochgeladenen Ausrüstungstabelle (sag_doch_dass_du_keinen_zugriff_und.txt) [[11]].
